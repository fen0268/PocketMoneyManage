// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/member/member.dart';
import 'models/work/work.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1409216122547788967),
      name: 'Member',
      lastPropertyId: const IdUid(4, 5886699498747806255),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5639535781257852102),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 6041170408992905481),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6434834343990510019),
            name: 'income',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5886699498747806255),
            name: 'createdAt',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 6658949043874423718),
      name: 'Work',
      lastPropertyId: const IdUid(8, 7236096820126950697),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6574474039561994137),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 3535154839045821906),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8826949900487606479),
            name: 'price',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1109916939477540401),
            name: 'doingAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2291478109814787585),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4931774163276701685),
            name: 'isDone',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6582913146019921924),
            name: 'assigneeMemberId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7236096820126950697),
            name: 'scheduleType',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 6658949043874423718),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Member: EntityDefinition<Member>(
        model: _entities[0],
        toOneRelations: (Member object) => [],
        toManyRelations: (Member object) => {},
        getId: (Member object) => object.id,
        setId: (Member object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field Member.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (Member object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.income);
          fbb.addInt64(3, object.createdAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Member(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              income:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              createdAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)));

          return object;
        }),
    Work: EntityDefinition<Work>(
        model: _entities[1],
        toOneRelations: (Work object) => [],
        toManyRelations: (Work object) => {},
        getId: (Work object) => object.id,
        setId: (Work object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field Work.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (Work object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final assigneeMemberIdOffset =
              fbb.writeString(object.assigneeMemberId);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addInt64(2, object.price);
          fbb.addInt64(3, object.doingAt.millisecondsSinceEpoch);
          fbb.addInt64(4, object.createdAt.millisecondsSinceEpoch);
          fbb.addBool(5, object.isDone);
          fbb.addOffset(6, assigneeMemberIdOffset);
          fbb.addInt64(7, object.scheduleType);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Work(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              price: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              doingAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              createdAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              isDone: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 14, false),
              assigneeMemberId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              scheduleType:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Member] entity fields to define ObjectBox queries.
class Member_ {
  /// see [Member.id]
  static final id = QueryIntegerProperty<Member>(_entities[0].properties[0]);

  /// see [Member.name]
  static final name = QueryStringProperty<Member>(_entities[0].properties[1]);

  /// see [Member.income]
  static final income =
      QueryIntegerProperty<Member>(_entities[0].properties[2]);

  /// see [Member.createdAt]
  static final createdAt =
      QueryIntegerProperty<Member>(_entities[0].properties[3]);
}

/// [Work] entity fields to define ObjectBox queries.
class Work_ {
  /// see [Work.id]
  static final id = QueryIntegerProperty<Work>(_entities[1].properties[0]);

  /// see [Work.title]
  static final title = QueryStringProperty<Work>(_entities[1].properties[1]);

  /// see [Work.price]
  static final price = QueryIntegerProperty<Work>(_entities[1].properties[2]);

  /// see [Work.doingAt]
  static final doingAt = QueryIntegerProperty<Work>(_entities[1].properties[3]);

  /// see [Work.createdAt]
  static final createdAt =
      QueryIntegerProperty<Work>(_entities[1].properties[4]);

  /// see [Work.isDone]
  static final isDone = QueryBooleanProperty<Work>(_entities[1].properties[5]);

  /// see [Work.assigneeMemberId]
  static final assigneeMemberId =
      QueryStringProperty<Work>(_entities[1].properties[6]);

  /// see [Work.scheduleType]
  static final scheduleType =
      QueryIntegerProperty<Work>(_entities[1].properties[7]);
}
